

package main

import (
	"fmt"
	"log"
	"net/http"

	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
)

var google0authConfig = &oauth2.Config{
	ClientID:     "577983635865-m2bl6otpl2teiodj8aunc15g0r5f6gpp.apps.googleusercontent.com",
	ClientSecret: "fVDLYWgEfnX4AYYuDCKIu3mC",
	RedirectURL:  "http://localhost:8080/callback",
	Scopes:       []string{"https://www.googleapis.com/auth/userinfo.email"},
	Endpoint:     google.Endpoint,
}

var randomState = "random"

func main() {
	// Your credentials should be obtained from the Google
	// Developer Console (https://console.developers.google.com).

	http.HandleFunc("/", handleHome)
	http.HandleFunc("/login", handleLogin)
	http.HandleFunc("/callback", handleCallback)
	// 	fmt.Println(google0authConfig)
	http.ListenAndServe(":8080", nil)

}

func handleHome(w http.ResponseWriter, r *http.Request) {
	var html = `<html><body><a href="/login">Google Log In</a></body></html>`
	fmt.Fprint(w, html)
}

func handleLogin(w http.ResponseWriter, r *http.Request) {
	url := google0authConfig.AuthCodeURL(randomState)
	// fmt.Printf("Visit the URL for the auth dialog: %v", url)
	fmt.Println(http.StatusTemporaryRedirect)
	http.Redirect(w, r, url, http.StatusTemporaryRedirect)
}

func handleCallback(w http.ResponseWriter, r *http.Request) {
	// for the scopes specified above.
	if r.FormValue("state") != randomState {
		fmt.Println("state is not valid")
		http.Redirect(w, r, "/", http.StatusTemporaryRedirect)
		return
	}
	tok, err := google0authConfig.Exchange(oauth2.NoContext, "authorization-code")
	fmt.Println(err)
	if err != nil {
		log.Fatal(err)
	}
	client := google0authConfig.Client(oauth2.NoContext, tok)
	client.Get("...")
}
